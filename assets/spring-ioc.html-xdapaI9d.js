import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as t,b as n}from"./app-1sB8-tQp.js";const r="/assets/ioc-02dc5458-7423-44ce-97b4-d199decac2ad-C6M47iL4.jpg",p="/assets/ioc-dcef8c4b-f7d3-445e-a809-5a66eab9e1e9-C_e1PHeS.jpg",a="/assets/ioc-f349d1b3-de75-4bb7-98f1-93918cea5aa9-BNjFcaC2.jpg",i={},c=n('<h1 id="spring-ioc-初探" tabindex="-1"><a class="header-anchor" href="#spring-ioc-初探"><span>Spring IoC 初探</span></a></h1><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://javabetter.cn/springboot/ioc.html#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-ioc" target="_blank" rel="noopener noreferrer">https://javabetter.cn/springboot/ioc.html#深入理解-ioc</a></p><hr><p><strong>IoC</strong></p><p>​ Bean：由第三方包装的object</p><p>​ 控制反转（Inversion of Control，IoC）：把 创建和管理 Bean的过程转移给了第三方（Spring IoC Container）</p><p>​ IoC把对象之间的依赖关系转成用配置文件来管理，由Spring IoC Container来管理，实现了对象之间的解耦——降低复杂度，防止出现问题的对象影响其他正常对象？，便于管理，方便编程（省略手动创建和管理对象）？</p><p>​ 依赖注入（dependency injection，DI）：配置文件把资源从外部注入到内部，容器加载了外部的文件、对象、数据，然后把这些资源诸如给程序内的对象，维护了程序内外对象之间的依赖关系</p><p>​ IoC 是设计思想，DI 是具体的实现方式</p><p>​ IoC可以通过其他方式实现，Spring选择了DI</p><hr><p><strong>Spring八大模块</strong></p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><hr><p><strong>IoC实践</strong></p><p>IoC容器 依赖于 4个jar包：$Beans, Core, Context, SpEL(SpringExpressLanguage)$</p><p>配置文件，service.xml</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>name</code>：类的属性，<code>ref</code>：属性的具体值</p><p>IoC的使用</p><figure><img src="'+a+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>ApplicationContext</code>是<code>IoC容器</code>的入口，也是<code>Spring程序</code>的入口</p><p>​ <code>ApplicationContext</code>是<code>BeanFactory</code>的子类</p><p>​ <code>BeanFactory</code>可以理解为<code>HashMap</code>，具有<code>get put</code>功能，“低级容器”</p><p>​ <code>ApplicationContext</code>继承多个接口，“高级容器”</p><p>​ <code>ApplicationContext</code>有两个具体的实现子类，用来读取配置文件：</p><p>​ <code>ClassPathXmlApplicationContext</code>：从<code>class path</code>加载配置文件（常用）</p><p>​ <code>FileSystemXmlApplicationContext</code>：从本地文件加载配置文件（不常用）</p><p><code>bean</code>对象的创建是通过反射实现<code>clazz.getDeclaredConstructor().newImstance()</code></p><p>容器中的所有对象在启动容器的时候，就已经被创建好了</p><hr><p>个人理解 + ChatGPT：</p><p><code>@Atutowired / @Resource</code> 来依赖注入某个字段时，需要该类在创建时使用了<code>@Component / @Service / @Mapper</code> 等注解，需要确保所要注入的依赖（即字段所代表的服务、组件等）已经在Spring容器中注册</p><p>使用<code>@Autowired/@Resource</code>注入的字段通常将访问级别设置为<code>private</code>，保持封装性</p><p>构造方法注入 / setter注入？</p><p><code>@Autyowired</code>来自Spring框架的核心容器，<code>@Resource</code>来自Java的JSR-330规范</p><p>单例注入？</p>',38),s=[c];function g(d,l){return t(),o("div",null,s)}const C=e(i,[["render",g],["__file","spring-ioc.html.vue"]]),f=JSON.parse('{"path":"/programming_language/java/open_source_framework/spring/spring-ioc.html","title":"Spring IoC 初探","lang":"zh-CN","frontmatter":{"title":"Spring IoC 初探","category":["开源框架"],"description":"Spring IoC 初探 参考链接 https://javabetter.cn/springboot/ioc.html#深入理解-ioc IoC ​ Bean：由第三方包装的object ​ 控制反转（Inversion of Control，IoC）：把 创建和管理 Bean的过程转移给了第三方（Spring IoC Container） ​ Io...","head":[["meta",{"property":"og:url","content":"https://raylan-chen.github.io/programming_language/java/open_source_framework/spring/spring-ioc.html"}],["meta",{"property":"og:site_name","content":"MyBlog"}],["meta",{"property":"og:title","content":"Spring IoC 初探"}],["meta",{"property":"og:description","content":"Spring IoC 初探 参考链接 https://javabetter.cn/springboot/ioc.html#深入理解-ioc IoC ​ Bean：由第三方包装的object ​ 控制反转（Inversion of Control，IoC）：把 创建和管理 Bean的过程转移给了第三方（Spring IoC Container） ​ Io..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-10T13:37:16.000Z"}],["meta",{"property":"article:author","content":"raylan.chen"}],["meta",{"property":"article:modified_time","content":"2025-08-10T13:37:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring IoC 初探\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-10T13:37:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"raylan.chen\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1723294370000,"updatedTime":1754833036000,"contributors":[{"name":"Raylan.Chen","email":"chen.z.my@qq.com","commits":2}]},"readingTime":{"minutes":1.92,"words":576},"filePathRelative":"programming_language/java/open_source_framework/spring/spring-ioc.md","localizedDate":"2024年8月10日","excerpt":"\\n<h2>参考链接</h2>\\n<p><a href=\\"https://javabetter.cn/springboot/ioc.html#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-ioc\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://javabetter.cn/springboot/ioc.html#深入理解-ioc</a></p>\\n<hr>\\n<p><strong>IoC</strong></p>\\n<p>​\\tBean：由第三方包装的object</p>\\n<p>​\\t控制反转（Inversion of Control，IoC）：把  创建和管理  Bean的过程转移给了第三方（Spring IoC Container）</p>","autoDesc":true}');export{C as comp,f as data};
