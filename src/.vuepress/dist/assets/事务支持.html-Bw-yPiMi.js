import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as n}from"./app-BwVlb3CD.js";const t={},e=n(`<h1 id="spring-boot-事务支持" tabindex="-1"><a class="header-anchor" href="#spring-boot-事务支持"><span>Spring Boot 事务支持</span></a></h1><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><p><a href="https://javabetter.cn/springboot/transaction.html" target="_blank" rel="noopener noreferrer">https://javabetter.cn/springboot/transaction.html</a></p><p><a href="https://javaguide.cn/database/mysql/mysql-questions-01.html#mysql-%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener noreferrer">https://javaguide.cn/database/mysql/mysql-questions-01.html#mysql-事务</a></p><hr><p><strong>数据库 事务</strong></p><p>一组操作，要么一起执行成功，要么一起执行失败</p><p><strong>事务的特性</strong></p><p>ACID</p><p>原子性（Atomicity）</p><ul><li>事务执行的最小单位，保证操作全部执行完成或全部执行失败</li></ul><p>一致性（Consistency）</p><ul><li>事务执行前后，保持数据库的完整性（如转账人和收涨人的金额总和）</li></ul><p>隔离性（Isolation）</p><ul><li>各并发事务之间互不干扰</li></ul><p>持久性（Durability）</p><ul><li>事务提交后，数据库即使发生故障也不会导致修改数据的丢失</li></ul><p>保证事务的 原子性、隔离性和持久性（手段）——保障了事务的 一致性（目的）</p><p><strong>事务的隔离级别</strong></p><p>未提交读（Read uncommitted）</p><ul><li>最低的隔离级别，可能会出现脏读（dirty reads，可能读取到尚未提交的数据变更）、不可重复读或幻读</li></ul><p>提交读（Read committed）</p><ul><li>允许读取并发事务已经提交的数据，可以防止脏读，但可能会遇到不可重复读（non repeatable read，在一个事务内多次读取的同一数据可能不一致）和幻读</li></ul><p>可重复读（Repeatable read）</p><ul><li>除非数据被事务本身修改，否则事务对同一数据的多次读取结果相同，可以防止脏读和不可重复读，但可能发生幻读（phantom read，可以看作不可重复读的一种特殊情况，可重复读保证多次读取同一数据后 内容的一致，幻读 焦点在于多次执行查询语句时，可能出现记录总数的变化）</li></ul><p>串行化（Serializable）</p><ul><li>最严格的隔离级别，所有事物按照次序依次执行，防止了脏读、不可重复读和幻读的出现，该隔离级别的事务具有最高的安全性，但是串行执行导致了效率的急剧下降</li></ul><p>MySQL数据库引擎中，InnoDB引擎支持事务，MyISAM引擎不支持</p><p><strong>Spring对事务的支持</strong></p><ul><li>编程式事务（TransactionTemplate，TransactionManager） <ul><li>业务代码中包含了额外的事务管理代码</li></ul></li><li>声明式事务（@Transactional） <ul><li>AOP，实现事务管理和业务代码的解耦，在目标方法前 创建/加入事务，在目标方法执行后根据执行情况 进行提交/回滚</li></ul></li></ul><p>Spring事务管理核心，事务管理器 TransactionManager</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TransactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>子接口，编程式事务接口 ReactiveTransactionManager 和 声明式事务接口 PlatformTransactionManager</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PlatformTransactionManager</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TransactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>具体实现，JDBC（DataSourceTransactionManager）、Hibernate（HibernateTransactionManager）、JPA（JpaTransactionManager）</p><p><strong>@Transactional</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">METHOD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Inherited</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Documented</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> Transactional</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //事务的传播行为</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Propagation</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUIRED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //事务的隔离级别</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Isolation</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> isolation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Isolation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //事务超时时间</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TransactionDefinition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TIMEOUT_DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //事务是否只读</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> readOnly</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事务的传播行为</strong></p><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播</p><p>（例如：被调用方法 可以选择在当前事务中执行，也可以开启一个新的事务）</p><ul><li><code>PROPAGATION_REQUIRED</code><ul><li>默认的事务传播行为</li><li>如果外部方法没有开启事务，则被<code>Propagation.REQUIRED</code>修饰的内部方法开启自己的事务</li><li>如果外部方法开启事务，并且其被<code>Propagation.REQUIRED</code>修饰，则内部方法和外部方法共用同一事务，只要其中一个方法回滚，则整个事务都需要回滚</li></ul></li><li><code>PROPAGATION_REQUIREDS_NEW</code></li><li><code>PROPAGATION_NESTED</code></li><li><code>PROPAGATION_MANDATORY</code></li><li><code>PROPAGATION_SUPPORTS</code></li><li><code>PROPAGATION_NOT_SUPPORTED</code></li><li><code>PROPAGATION_NEVER</code></li></ul><p><strong>事务的隔离级别</strong></p><p>Spring的事务隔离级别</p><ul><li><code>ISOLATION_DEFAULT</code><ul><li>使用数据库默认的隔离级别</li></ul></li><li><code>ISOLATION_READ_UNCOMMITED</code></li><li><code>ISOLATION_READ_COMMITED</code></li><li><code>ISOLATION_REPEATABLE_READ</code></li><li><code>ISOLATION_SERIALIZABLE</code></li></ul><p><strong>事务的超时时间</strong></p><p>事务所允许执行的最长时间，如果超时后还没有完成，则自动回滚；事务的执行时间如果太长，会导致该事务长时间占用数据库资源</p><p><strong>事务的只读属性</strong></p><p>MySQL（InnoDB）默认对每一个连接都启用autocommit模式，每一个SQL语句都会在一个单独的事务中执行，执行结束后自动提交</p><p>如果事务只是对数据库进行 读 操作，数据库可以利用事务的只读属性采取优化措施</p><p><strong>事务的回滚策略</strong></p><p>默认情况下，事务只在出现 运行时异常（Runtime Exception）和 Error 时回滚，遇到检查异常（Checked Exception，需要主动捕获处理或者向上抛出）不回滚</p><p>如果想要回滚特定异常类型</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Transsactional</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> MyException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>补充</strong></p><p>@Transactional 作用范围：类、方法、接口（不推荐）</p><p>@Transactional 只能对 权限修饰符为pubic 的方法使用</p><p>避免在同一个类中华调用 @Transactional 注解的方法，这会导致事务失效？？？</p>`,57),l=[e];function p(h,r){return a(),s("div",null,l)}const d=i(t,[["render",p],["__file","事务支持.html.vue"]]),c=JSON.parse('{"path":"/springboot/%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81.html","title":"Spring Boot 事务支持","lang":"zh-CN","frontmatter":{"description":"Spring Boot 事务支持 参考链接 https://javabetter.cn/springboot/transaction.html https://javaguide.cn/database/mysql/mysql-questions-01.html#mysql-事务 数据库 事务 一组操作，要么一起执行成功，要么一起执行失败 事务的特性 ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/springboot/%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81.html"}],["meta",{"property":"og:site_name","content":"MyBlog"}],["meta",{"property":"og:title","content":"Spring Boot 事务支持"}],["meta",{"property":"og:description","content":"Spring Boot 事务支持 参考链接 https://javabetter.cn/springboot/transaction.html https://javaguide.cn/database/mysql/mysql-questions-01.html#mysql-事务 数据库 事务 一组操作，要么一起执行成功，要么一起执行失败 事务的特性 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"raylan.chen"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot 事务支持\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"raylan.chen\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.93,"words":1179},"filePathRelative":"springboot/事务支持.md","excerpt":"\\n<h2>参考链接</h2>\\n<p><a href=\\"https://javabetter.cn/springboot/transaction.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://javabetter.cn/springboot/transaction.html</a></p>\\n<p><a href=\\"https://javaguide.cn/database/mysql/mysql-questions-01.html#mysql-%E4%BA%8B%E5%8A%A1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://javaguide.cn/database/mysql/mysql-questions-01.html#mysql-事务</a></p>","autoDesc":true}');export{d as comp,c as data};
